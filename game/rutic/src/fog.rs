/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const FLOAT_EQ_MARGIN: f64 = 0.0000001;
pub const SDLK_SCANCODE_MASK: u32 = 1073741824;
pub const MAX_NUM_SUB_SPRITES: u32 = 32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = ::std::os::raw::c_longlong;
pub type u64 = ::std::os::raw::c_ulonglong;
pub type real = f32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Vec2 {
    pub __bindgen_anon_1: Vec2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Vec2__bindgen_ty_1 {
    pub __bindgen_anon_1: Vec2__bindgen_ty_1__bindgen_ty_1,
    pub __: [real; 2usize],
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec2__bindgen_ty_1__bindgen_ty_1 {
    pub x: real,
    pub y: real,
}
#[test]
fn bindgen_test_layout_Vec2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Vec2__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Vec2__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec2__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Vec2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec2__bindgen_ty_1__bindgen_ty_1>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec2__bindgen_ty_1__bindgen_ty_1>())).y as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[test]
fn bindgen_test_layout_Vec2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Vec2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Vec2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec2__bindgen_ty_1>())).__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec2__bindgen_ty_1),
            "::",
            stringify!(__)
        )
    );
}
#[test]
fn bindgen_test_layout_Vec2() {
    assert_eq!(
        ::std::mem::size_of::<Vec2>(),
        8usize,
        concat!("Size of: ", stringify!(Vec2))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec2>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec2))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Vec3 {
    pub __bindgen_anon_1: Vec3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Vec3__bindgen_ty_1 {
    pub __bindgen_anon_1: Vec3__bindgen_ty_1__bindgen_ty_1,
    pub __: [real; 3usize],
    _bindgen_union_align: [u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec3__bindgen_ty_1__bindgen_ty_1 {
    pub x: real,
    pub y: real,
    pub z: real,
}
#[test]
fn bindgen_test_layout_Vec3__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Vec3__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(Vec3__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec3__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Vec3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec3__bindgen_ty_1__bindgen_ty_1>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec3__bindgen_ty_1__bindgen_ty_1>())).y as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec3__bindgen_ty_1__bindgen_ty_1>())).z as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
}
#[test]
fn bindgen_test_layout_Vec3__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Vec3__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(Vec3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec3__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec3__bindgen_ty_1>())).__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec3__bindgen_ty_1),
            "::",
            stringify!(__)
        )
    );
}
#[test]
fn bindgen_test_layout_Vec3() {
    assert_eq!(
        ::std::mem::size_of::<Vec3>(),
        12usize,
        concat!("Size of: ", stringify!(Vec3))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec3>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec3))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Vec4 {
    pub __bindgen_anon_1: Vec4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Vec4__bindgen_ty_1 {
    pub __bindgen_anon_1: Vec4__bindgen_ty_1__bindgen_ty_1,
    pub __: [real; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec4__bindgen_ty_1__bindgen_ty_1 {
    pub x: real,
    pub y: real,
    pub z: real,
    pub w: real,
}
#[test]
fn bindgen_test_layout_Vec4__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Vec4__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Vec4__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec4__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Vec4__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec4__bindgen_ty_1__bindgen_ty_1>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec4__bindgen_ty_1__bindgen_ty_1>())).y as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec4__bindgen_ty_1__bindgen_ty_1>())).z as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Vec4__bindgen_ty_1__bindgen_ty_1>())).w as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[test]
fn bindgen_test_layout_Vec4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Vec4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Vec4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec4__bindgen_ty_1>())).__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vec4__bindgen_ty_1),
            "::",
            stringify!(__)
        )
    );
}
#[test]
fn bindgen_test_layout_Vec4() {
    assert_eq!(
        ::std::mem::size_of::<Vec4>(),
        16usize,
        concat!("Size of: ", stringify!(Vec4))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec4>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec4))
    );
}
pub type ProgressFuncVec4 = ::std::option::Option<
    unsafe extern "C" fn(arg1: Vec4, arg2: f32, arg3: Vec4, arg4: f32, arg5: f32) -> Vec4,
>;
pub type AssetID = u64;
pub type FogCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type Layer = u32;
pub type ShapeID = u32;
pub type Callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: f32, arg2: f32, arg3: f32, arg4: *mut ::std::os::raw::c_void),
>;
pub type ProgressFuncF32 = ::std::option::Option<
    unsafe extern "C" fn(arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32) -> f32,
>;
pub type InputCode = u32;
pub type Name = u32;
pub type b8 = u8;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_INVALID: SDL_GameControllerAxis = -1;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_LEFTX: SDL_GameControllerAxis = 0;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_LEFTY: SDL_GameControllerAxis = 1;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_RIGHTX: SDL_GameControllerAxis = 2;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_RIGHTY: SDL_GameControllerAxis = 3;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_TRIGGERLEFT: SDL_GameControllerAxis = 4;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_TRIGGERRIGHT: SDL_GameControllerAxis = 5;
pub const SDL_GameControllerAxis_SDL_CONTROLLER_AXIS_MAX: SDL_GameControllerAxis = 6;
pub type SDL_GameControllerAxis = i32;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_INVALID: SDL_GameControllerButton = -1;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_A: SDL_GameControllerButton = 0;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_B: SDL_GameControllerButton = 1;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_X: SDL_GameControllerButton = 2;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_Y: SDL_GameControllerButton = 3;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_BACK: SDL_GameControllerButton = 4;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_GUIDE: SDL_GameControllerButton = 5;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_START: SDL_GameControllerButton = 6;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_LEFTSTICK: SDL_GameControllerButton = 7;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_RIGHTSTICK: SDL_GameControllerButton = 8;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_LEFTSHOULDER: SDL_GameControllerButton = 9;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: SDL_GameControllerButton =
    10;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_DPAD_UP: SDL_GameControllerButton = 11;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_DPAD_DOWN: SDL_GameControllerButton = 12;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_DPAD_LEFT: SDL_GameControllerButton = 13;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_DPAD_RIGHT: SDL_GameControllerButton = 14;
pub const SDL_GameControllerButton_SDL_CONTROLLER_BUTTON_MAX: SDL_GameControllerButton = 15;
pub type SDL_GameControllerButton = i32;
pub const SDL_Scancode_SDL_SCANCODE_UNKNOWN: SDL_Scancode = 0;
pub const SDL_Scancode_SDL_SCANCODE_A: SDL_Scancode = 4;
pub const SDL_Scancode_SDL_SCANCODE_B: SDL_Scancode = 5;
pub const SDL_Scancode_SDL_SCANCODE_C: SDL_Scancode = 6;
pub const SDL_Scancode_SDL_SCANCODE_D: SDL_Scancode = 7;
pub const SDL_Scancode_SDL_SCANCODE_E: SDL_Scancode = 8;
pub const SDL_Scancode_SDL_SCANCODE_F: SDL_Scancode = 9;
pub const SDL_Scancode_SDL_SCANCODE_G: SDL_Scancode = 10;
pub const SDL_Scancode_SDL_SCANCODE_H: SDL_Scancode = 11;
pub const SDL_Scancode_SDL_SCANCODE_I: SDL_Scancode = 12;
pub const SDL_Scancode_SDL_SCANCODE_J: SDL_Scancode = 13;
pub const SDL_Scancode_SDL_SCANCODE_K: SDL_Scancode = 14;
pub const SDL_Scancode_SDL_SCANCODE_L: SDL_Scancode = 15;
pub const SDL_Scancode_SDL_SCANCODE_M: SDL_Scancode = 16;
pub const SDL_Scancode_SDL_SCANCODE_N: SDL_Scancode = 17;
pub const SDL_Scancode_SDL_SCANCODE_O: SDL_Scancode = 18;
pub const SDL_Scancode_SDL_SCANCODE_P: SDL_Scancode = 19;
pub const SDL_Scancode_SDL_SCANCODE_Q: SDL_Scancode = 20;
pub const SDL_Scancode_SDL_SCANCODE_R: SDL_Scancode = 21;
pub const SDL_Scancode_SDL_SCANCODE_S: SDL_Scancode = 22;
pub const SDL_Scancode_SDL_SCANCODE_T: SDL_Scancode = 23;
pub const SDL_Scancode_SDL_SCANCODE_U: SDL_Scancode = 24;
pub const SDL_Scancode_SDL_SCANCODE_V: SDL_Scancode = 25;
pub const SDL_Scancode_SDL_SCANCODE_W: SDL_Scancode = 26;
pub const SDL_Scancode_SDL_SCANCODE_X: SDL_Scancode = 27;
pub const SDL_Scancode_SDL_SCANCODE_Y: SDL_Scancode = 28;
pub const SDL_Scancode_SDL_SCANCODE_Z: SDL_Scancode = 29;
pub const SDL_Scancode_SDL_SCANCODE_1: SDL_Scancode = 30;
pub const SDL_Scancode_SDL_SCANCODE_2: SDL_Scancode = 31;
pub const SDL_Scancode_SDL_SCANCODE_3: SDL_Scancode = 32;
pub const SDL_Scancode_SDL_SCANCODE_4: SDL_Scancode = 33;
pub const SDL_Scancode_SDL_SCANCODE_5: SDL_Scancode = 34;
pub const SDL_Scancode_SDL_SCANCODE_6: SDL_Scancode = 35;
pub const SDL_Scancode_SDL_SCANCODE_7: SDL_Scancode = 36;
pub const SDL_Scancode_SDL_SCANCODE_8: SDL_Scancode = 37;
pub const SDL_Scancode_SDL_SCANCODE_9: SDL_Scancode = 38;
pub const SDL_Scancode_SDL_SCANCODE_0: SDL_Scancode = 39;
pub const SDL_Scancode_SDL_SCANCODE_RETURN: SDL_Scancode = 40;
pub const SDL_Scancode_SDL_SCANCODE_ESCAPE: SDL_Scancode = 41;
pub const SDL_Scancode_SDL_SCANCODE_BACKSPACE: SDL_Scancode = 42;
pub const SDL_Scancode_SDL_SCANCODE_TAB: SDL_Scancode = 43;
pub const SDL_Scancode_SDL_SCANCODE_SPACE: SDL_Scancode = 44;
pub const SDL_Scancode_SDL_SCANCODE_MINUS: SDL_Scancode = 45;
pub const SDL_Scancode_SDL_SCANCODE_EQUALS: SDL_Scancode = 46;
pub const SDL_Scancode_SDL_SCANCODE_LEFTBRACKET: SDL_Scancode = 47;
pub const SDL_Scancode_SDL_SCANCODE_RIGHTBRACKET: SDL_Scancode = 48;
#[doc = "< Located at the lower left of the return"]
#[doc = "   key on ISO keyboards and at the right end"]
#[doc = "   of the QWERTY row on ANSI keyboards."]
#[doc = "   Produces REVERSE SOLIDUS (backslash) and"]
#[doc = "   VERTICAL LINE in a US layout, REVERSE"]
#[doc = "   SOLIDUS and VERTICAL LINE in a UK Mac"]
#[doc = "   layout, NUMBER SIGN and TILDE in a UK"]
#[doc = "   Windows layout, DOLLAR SIGN and POUND SIGN"]
#[doc = "   in a Swiss German layout, NUMBER SIGN and"]
#[doc = "   APOSTROPHE in a German layout, GRAVE"]
#[doc = "   ACCENT and POUND SIGN in a French Mac"]
#[doc = "   layout, and ASTERISK and MICRO SIGN in a"]
#[doc = "   French Windows layout."]
pub const SDL_Scancode_SDL_SCANCODE_BACKSLASH: SDL_Scancode = 49;
#[doc = "< ISO USB keyboards actually use this code"]
#[doc = "   instead of 49 for the same key, but all"]
#[doc = "   OSes I've seen treat the two codes"]
#[doc = "   identically. So, as an implementor, unless"]
#[doc = "   your keyboard generates both of those"]
#[doc = "   codes and your OS treats them differently,"]
#[doc = "   you should generate SDL_SCANCODE_BACKSLASH"]
#[doc = "   instead of this code. As a user, you"]
#[doc = "   should not rely on this code because SDL"]
#[doc = "   will never generate it with most (all?)"]
#[doc = "   keyboards."]
pub const SDL_Scancode_SDL_SCANCODE_NONUSHASH: SDL_Scancode = 50;
pub const SDL_Scancode_SDL_SCANCODE_SEMICOLON: SDL_Scancode = 51;
pub const SDL_Scancode_SDL_SCANCODE_APOSTROPHE: SDL_Scancode = 52;
#[doc = "< Located in the top left corner (on both ANSI"]
#[doc = "   and ISO keyboards). Produces GRAVE ACCENT and"]
#[doc = "   TILDE in a US Windows layout and in US and UK"]
#[doc = "   Mac layouts on ANSI keyboards, GRAVE ACCENT"]
#[doc = "   and NOT SIGN in a UK Windows layout, SECTION"]
#[doc = "   SIGN and PLUS-MINUS SIGN in US and UK Mac"]
#[doc = "   layouts on ISO keyboards, SECTION SIGN and"]
#[doc = "   DEGREE SIGN in a Swiss German layout (Mac:"]
#[doc = "   only on ISO keyboards), CIRCUMFLEX ACCENT and"]
#[doc = "   DEGREE SIGN in a German layout (Mac: only on"]
#[doc = "   ISO keyboards), SUPERSCRIPT TWO and TILDE in a"]
#[doc = "   French Windows layout, COMMERCIAL AT and"]
#[doc = "   NUMBER SIGN in a French Mac layout on ISO"]
#[doc = "   keyboards, and LESS-THAN SIGN and GREATER-THAN"]
#[doc = "   SIGN in a Swiss German, German, or French Mac"]
#[doc = "   layout on ANSI keyboards."]
pub const SDL_Scancode_SDL_SCANCODE_GRAVE: SDL_Scancode = 53;
pub const SDL_Scancode_SDL_SCANCODE_COMMA: SDL_Scancode = 54;
pub const SDL_Scancode_SDL_SCANCODE_PERIOD: SDL_Scancode = 55;
pub const SDL_Scancode_SDL_SCANCODE_SLASH: SDL_Scancode = 56;
pub const SDL_Scancode_SDL_SCANCODE_CAPSLOCK: SDL_Scancode = 57;
pub const SDL_Scancode_SDL_SCANCODE_F1: SDL_Scancode = 58;
pub const SDL_Scancode_SDL_SCANCODE_F2: SDL_Scancode = 59;
pub const SDL_Scancode_SDL_SCANCODE_F3: SDL_Scancode = 60;
pub const SDL_Scancode_SDL_SCANCODE_F4: SDL_Scancode = 61;
pub const SDL_Scancode_SDL_SCANCODE_F5: SDL_Scancode = 62;
pub const SDL_Scancode_SDL_SCANCODE_F6: SDL_Scancode = 63;
pub const SDL_Scancode_SDL_SCANCODE_F7: SDL_Scancode = 64;
pub const SDL_Scancode_SDL_SCANCODE_F8: SDL_Scancode = 65;
pub const SDL_Scancode_SDL_SCANCODE_F9: SDL_Scancode = 66;
pub const SDL_Scancode_SDL_SCANCODE_F10: SDL_Scancode = 67;
pub const SDL_Scancode_SDL_SCANCODE_F11: SDL_Scancode = 68;
pub const SDL_Scancode_SDL_SCANCODE_F12: SDL_Scancode = 69;
pub const SDL_Scancode_SDL_SCANCODE_PRINTSCREEN: SDL_Scancode = 70;
pub const SDL_Scancode_SDL_SCANCODE_SCROLLLOCK: SDL_Scancode = 71;
pub const SDL_Scancode_SDL_SCANCODE_PAUSE: SDL_Scancode = 72;
#[doc = "< insert on PC, help on some Mac keyboards (but"]
#[doc = "does send code 73, not 117)"]
pub const SDL_Scancode_SDL_SCANCODE_INSERT: SDL_Scancode = 73;
pub const SDL_Scancode_SDL_SCANCODE_HOME: SDL_Scancode = 74;
pub const SDL_Scancode_SDL_SCANCODE_PAGEUP: SDL_Scancode = 75;
pub const SDL_Scancode_SDL_SCANCODE_DELETE: SDL_Scancode = 76;
pub const SDL_Scancode_SDL_SCANCODE_END: SDL_Scancode = 77;
pub const SDL_Scancode_SDL_SCANCODE_PAGEDOWN: SDL_Scancode = 78;
pub const SDL_Scancode_SDL_SCANCODE_RIGHT: SDL_Scancode = 79;
pub const SDL_Scancode_SDL_SCANCODE_LEFT: SDL_Scancode = 80;
pub const SDL_Scancode_SDL_SCANCODE_DOWN: SDL_Scancode = 81;
pub const SDL_Scancode_SDL_SCANCODE_UP: SDL_Scancode = 82;
#[doc = "< num lock on PC, clear on Mac keyboards"]
pub const SDL_Scancode_SDL_SCANCODE_NUMLOCKCLEAR: SDL_Scancode = 83;
pub const SDL_Scancode_SDL_SCANCODE_KP_DIVIDE: SDL_Scancode = 84;
pub const SDL_Scancode_SDL_SCANCODE_KP_MULTIPLY: SDL_Scancode = 85;
pub const SDL_Scancode_SDL_SCANCODE_KP_MINUS: SDL_Scancode = 86;
pub const SDL_Scancode_SDL_SCANCODE_KP_PLUS: SDL_Scancode = 87;
pub const SDL_Scancode_SDL_SCANCODE_KP_ENTER: SDL_Scancode = 88;
pub const SDL_Scancode_SDL_SCANCODE_KP_1: SDL_Scancode = 89;
pub const SDL_Scancode_SDL_SCANCODE_KP_2: SDL_Scancode = 90;
pub const SDL_Scancode_SDL_SCANCODE_KP_3: SDL_Scancode = 91;
pub const SDL_Scancode_SDL_SCANCODE_KP_4: SDL_Scancode = 92;
pub const SDL_Scancode_SDL_SCANCODE_KP_5: SDL_Scancode = 93;
pub const SDL_Scancode_SDL_SCANCODE_KP_6: SDL_Scancode = 94;
pub const SDL_Scancode_SDL_SCANCODE_KP_7: SDL_Scancode = 95;
pub const SDL_Scancode_SDL_SCANCODE_KP_8: SDL_Scancode = 96;
pub const SDL_Scancode_SDL_SCANCODE_KP_9: SDL_Scancode = 97;
pub const SDL_Scancode_SDL_SCANCODE_KP_0: SDL_Scancode = 98;
pub const SDL_Scancode_SDL_SCANCODE_KP_PERIOD: SDL_Scancode = 99;
#[doc = "< This is the additional key that ISO"]
#[doc = "   keyboards have over ANSI ones,"]
#[doc = "   located between left shift and Y."]
#[doc = "   Produces GRAVE ACCENT and TILDE in a"]
#[doc = "   US or UK Mac layout, REVERSE SOLIDUS"]
#[doc = "   (backslash) and VERTICAL LINE in a"]
#[doc = "   US or UK Windows layout, and"]
#[doc = "   LESS-THAN SIGN and GREATER-THAN SIGN"]
#[doc = "   in a Swiss German, German, or French"]
#[doc = "   layout."]
pub const SDL_Scancode_SDL_SCANCODE_NONUSBACKSLASH: SDL_Scancode = 100;
#[doc = "< windows contextual menu, compose"]
pub const SDL_Scancode_SDL_SCANCODE_APPLICATION: SDL_Scancode = 101;
#[doc = "< The USB document says this is a status flag,"]
#[doc = "   not a physical key - but some Mac keyboards"]
#[doc = "   do have a power key."]
pub const SDL_Scancode_SDL_SCANCODE_POWER: SDL_Scancode = 102;
pub const SDL_Scancode_SDL_SCANCODE_KP_EQUALS: SDL_Scancode = 103;
pub const SDL_Scancode_SDL_SCANCODE_F13: SDL_Scancode = 104;
pub const SDL_Scancode_SDL_SCANCODE_F14: SDL_Scancode = 105;
pub const SDL_Scancode_SDL_SCANCODE_F15: SDL_Scancode = 106;
pub const SDL_Scancode_SDL_SCANCODE_F16: SDL_Scancode = 107;
pub const SDL_Scancode_SDL_SCANCODE_F17: SDL_Scancode = 108;
pub const SDL_Scancode_SDL_SCANCODE_F18: SDL_Scancode = 109;
pub const SDL_Scancode_SDL_SCANCODE_F19: SDL_Scancode = 110;
pub const SDL_Scancode_SDL_SCANCODE_F20: SDL_Scancode = 111;
pub const SDL_Scancode_SDL_SCANCODE_F21: SDL_Scancode = 112;
pub const SDL_Scancode_SDL_SCANCODE_F22: SDL_Scancode = 113;
pub const SDL_Scancode_SDL_SCANCODE_F23: SDL_Scancode = 114;
pub const SDL_Scancode_SDL_SCANCODE_F24: SDL_Scancode = 115;
pub const SDL_Scancode_SDL_SCANCODE_EXECUTE: SDL_Scancode = 116;
pub const SDL_Scancode_SDL_SCANCODE_HELP: SDL_Scancode = 117;
pub const SDL_Scancode_SDL_SCANCODE_MENU: SDL_Scancode = 118;
pub const SDL_Scancode_SDL_SCANCODE_SELECT: SDL_Scancode = 119;
pub const SDL_Scancode_SDL_SCANCODE_STOP: SDL_Scancode = 120;
#[doc = "< redo"]
pub const SDL_Scancode_SDL_SCANCODE_AGAIN: SDL_Scancode = 121;
pub const SDL_Scancode_SDL_SCANCODE_UNDO: SDL_Scancode = 122;
pub const SDL_Scancode_SDL_SCANCODE_CUT: SDL_Scancode = 123;
pub const SDL_Scancode_SDL_SCANCODE_COPY: SDL_Scancode = 124;
pub const SDL_Scancode_SDL_SCANCODE_PASTE: SDL_Scancode = 125;
pub const SDL_Scancode_SDL_SCANCODE_FIND: SDL_Scancode = 126;
pub const SDL_Scancode_SDL_SCANCODE_MUTE: SDL_Scancode = 127;
pub const SDL_Scancode_SDL_SCANCODE_VOLUMEUP: SDL_Scancode = 128;
pub const SDL_Scancode_SDL_SCANCODE_VOLUMEDOWN: SDL_Scancode = 129;
pub const SDL_Scancode_SDL_SCANCODE_KP_COMMA: SDL_Scancode = 133;
pub const SDL_Scancode_SDL_SCANCODE_KP_EQUALSAS400: SDL_Scancode = 134;
#[doc = "< used on Asian keyboards, see"]
#[doc = "footnotes in USB doc"]
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL1: SDL_Scancode = 135;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL2: SDL_Scancode = 136;
#[doc = "< Yen"]
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL3: SDL_Scancode = 137;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL4: SDL_Scancode = 138;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL5: SDL_Scancode = 139;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL6: SDL_Scancode = 140;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL7: SDL_Scancode = 141;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL8: SDL_Scancode = 142;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL9: SDL_Scancode = 143;
#[doc = "< Hangul/English toggle"]
pub const SDL_Scancode_SDL_SCANCODE_LANG1: SDL_Scancode = 144;
#[doc = "< Hanja conversion"]
pub const SDL_Scancode_SDL_SCANCODE_LANG2: SDL_Scancode = 145;
#[doc = "< Katakana"]
pub const SDL_Scancode_SDL_SCANCODE_LANG3: SDL_Scancode = 146;
#[doc = "< Hiragana"]
pub const SDL_Scancode_SDL_SCANCODE_LANG4: SDL_Scancode = 147;
#[doc = "< Zenkaku/Hankaku"]
pub const SDL_Scancode_SDL_SCANCODE_LANG5: SDL_Scancode = 148;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG6: SDL_Scancode = 149;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG7: SDL_Scancode = 150;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG8: SDL_Scancode = 151;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG9: SDL_Scancode = 152;
#[doc = "< Erase-Eaze"]
pub const SDL_Scancode_SDL_SCANCODE_ALTERASE: SDL_Scancode = 153;
pub const SDL_Scancode_SDL_SCANCODE_SYSREQ: SDL_Scancode = 154;
pub const SDL_Scancode_SDL_SCANCODE_CANCEL: SDL_Scancode = 155;
pub const SDL_Scancode_SDL_SCANCODE_CLEAR: SDL_Scancode = 156;
pub const SDL_Scancode_SDL_SCANCODE_PRIOR: SDL_Scancode = 157;
pub const SDL_Scancode_SDL_SCANCODE_RETURN2: SDL_Scancode = 158;
pub const SDL_Scancode_SDL_SCANCODE_SEPARATOR: SDL_Scancode = 159;
pub const SDL_Scancode_SDL_SCANCODE_OUT: SDL_Scancode = 160;
pub const SDL_Scancode_SDL_SCANCODE_OPER: SDL_Scancode = 161;
pub const SDL_Scancode_SDL_SCANCODE_CLEARAGAIN: SDL_Scancode = 162;
pub const SDL_Scancode_SDL_SCANCODE_CRSEL: SDL_Scancode = 163;
pub const SDL_Scancode_SDL_SCANCODE_EXSEL: SDL_Scancode = 164;
pub const SDL_Scancode_SDL_SCANCODE_KP_00: SDL_Scancode = 176;
pub const SDL_Scancode_SDL_SCANCODE_KP_000: SDL_Scancode = 177;
pub const SDL_Scancode_SDL_SCANCODE_THOUSANDSSEPARATOR: SDL_Scancode = 178;
pub const SDL_Scancode_SDL_SCANCODE_DECIMALSEPARATOR: SDL_Scancode = 179;
pub const SDL_Scancode_SDL_SCANCODE_CURRENCYUNIT: SDL_Scancode = 180;
pub const SDL_Scancode_SDL_SCANCODE_CURRENCYSUBUNIT: SDL_Scancode = 181;
pub const SDL_Scancode_SDL_SCANCODE_KP_LEFTPAREN: SDL_Scancode = 182;
pub const SDL_Scancode_SDL_SCANCODE_KP_RIGHTPAREN: SDL_Scancode = 183;
pub const SDL_Scancode_SDL_SCANCODE_KP_LEFTBRACE: SDL_Scancode = 184;
pub const SDL_Scancode_SDL_SCANCODE_KP_RIGHTBRACE: SDL_Scancode = 185;
pub const SDL_Scancode_SDL_SCANCODE_KP_TAB: SDL_Scancode = 186;
pub const SDL_Scancode_SDL_SCANCODE_KP_BACKSPACE: SDL_Scancode = 187;
pub const SDL_Scancode_SDL_SCANCODE_KP_A: SDL_Scancode = 188;
pub const SDL_Scancode_SDL_SCANCODE_KP_B: SDL_Scancode = 189;
pub const SDL_Scancode_SDL_SCANCODE_KP_C: SDL_Scancode = 190;
pub const SDL_Scancode_SDL_SCANCODE_KP_D: SDL_Scancode = 191;
pub const SDL_Scancode_SDL_SCANCODE_KP_E: SDL_Scancode = 192;
pub const SDL_Scancode_SDL_SCANCODE_KP_F: SDL_Scancode = 193;
pub const SDL_Scancode_SDL_SCANCODE_KP_XOR: SDL_Scancode = 194;
pub const SDL_Scancode_SDL_SCANCODE_KP_POWER: SDL_Scancode = 195;
pub const SDL_Scancode_SDL_SCANCODE_KP_PERCENT: SDL_Scancode = 196;
pub const SDL_Scancode_SDL_SCANCODE_KP_LESS: SDL_Scancode = 197;
pub const SDL_Scancode_SDL_SCANCODE_KP_GREATER: SDL_Scancode = 198;
pub const SDL_Scancode_SDL_SCANCODE_KP_AMPERSAND: SDL_Scancode = 199;
pub const SDL_Scancode_SDL_SCANCODE_KP_DBLAMPERSAND: SDL_Scancode = 200;
pub const SDL_Scancode_SDL_SCANCODE_KP_VERTICALBAR: SDL_Scancode = 201;
pub const SDL_Scancode_SDL_SCANCODE_KP_DBLVERTICALBAR: SDL_Scancode = 202;
pub const SDL_Scancode_SDL_SCANCODE_KP_COLON: SDL_Scancode = 203;
pub const SDL_Scancode_SDL_SCANCODE_KP_HASH: SDL_Scancode = 204;
pub const SDL_Scancode_SDL_SCANCODE_KP_SPACE: SDL_Scancode = 205;
pub const SDL_Scancode_SDL_SCANCODE_KP_AT: SDL_Scancode = 206;
pub const SDL_Scancode_SDL_SCANCODE_KP_EXCLAM: SDL_Scancode = 207;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMSTORE: SDL_Scancode = 208;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMRECALL: SDL_Scancode = 209;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMCLEAR: SDL_Scancode = 210;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMADD: SDL_Scancode = 211;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMSUBTRACT: SDL_Scancode = 212;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMMULTIPLY: SDL_Scancode = 213;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMDIVIDE: SDL_Scancode = 214;
pub const SDL_Scancode_SDL_SCANCODE_KP_PLUSMINUS: SDL_Scancode = 215;
pub const SDL_Scancode_SDL_SCANCODE_KP_CLEAR: SDL_Scancode = 216;
pub const SDL_Scancode_SDL_SCANCODE_KP_CLEARENTRY: SDL_Scancode = 217;
pub const SDL_Scancode_SDL_SCANCODE_KP_BINARY: SDL_Scancode = 218;
pub const SDL_Scancode_SDL_SCANCODE_KP_OCTAL: SDL_Scancode = 219;
pub const SDL_Scancode_SDL_SCANCODE_KP_DECIMAL: SDL_Scancode = 220;
pub const SDL_Scancode_SDL_SCANCODE_KP_HEXADECIMAL: SDL_Scancode = 221;
pub const SDL_Scancode_SDL_SCANCODE_LCTRL: SDL_Scancode = 224;
pub const SDL_Scancode_SDL_SCANCODE_LSHIFT: SDL_Scancode = 225;
#[doc = "< alt, option"]
pub const SDL_Scancode_SDL_SCANCODE_LALT: SDL_Scancode = 226;
#[doc = "< windows, command (apple), meta"]
pub const SDL_Scancode_SDL_SCANCODE_LGUI: SDL_Scancode = 227;
pub const SDL_Scancode_SDL_SCANCODE_RCTRL: SDL_Scancode = 228;
pub const SDL_Scancode_SDL_SCANCODE_RSHIFT: SDL_Scancode = 229;
#[doc = "< alt gr, option"]
pub const SDL_Scancode_SDL_SCANCODE_RALT: SDL_Scancode = 230;
#[doc = "< windows, command (apple), meta"]
pub const SDL_Scancode_SDL_SCANCODE_RGUI: SDL_Scancode = 231;
#[doc = "< I'm not sure if this is really not covered"]
#[doc = "   by any of the above, but since there's a"]
#[doc = "   special KMOD_MODE for it I'm adding it here"]
pub const SDL_Scancode_SDL_SCANCODE_MODE: SDL_Scancode = 257;
pub const SDL_Scancode_SDL_SCANCODE_AUDIONEXT: SDL_Scancode = 258;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOPREV: SDL_Scancode = 259;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOSTOP: SDL_Scancode = 260;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOPLAY: SDL_Scancode = 261;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOMUTE: SDL_Scancode = 262;
pub const SDL_Scancode_SDL_SCANCODE_MEDIASELECT: SDL_Scancode = 263;
pub const SDL_Scancode_SDL_SCANCODE_WWW: SDL_Scancode = 264;
pub const SDL_Scancode_SDL_SCANCODE_MAIL: SDL_Scancode = 265;
pub const SDL_Scancode_SDL_SCANCODE_CALCULATOR: SDL_Scancode = 266;
pub const SDL_Scancode_SDL_SCANCODE_COMPUTER: SDL_Scancode = 267;
pub const SDL_Scancode_SDL_SCANCODE_AC_SEARCH: SDL_Scancode = 268;
pub const SDL_Scancode_SDL_SCANCODE_AC_HOME: SDL_Scancode = 269;
pub const SDL_Scancode_SDL_SCANCODE_AC_BACK: SDL_Scancode = 270;
pub const SDL_Scancode_SDL_SCANCODE_AC_FORWARD: SDL_Scancode = 271;
pub const SDL_Scancode_SDL_SCANCODE_AC_STOP: SDL_Scancode = 272;
pub const SDL_Scancode_SDL_SCANCODE_AC_REFRESH: SDL_Scancode = 273;
pub const SDL_Scancode_SDL_SCANCODE_AC_BOOKMARKS: SDL_Scancode = 274;
pub const SDL_Scancode_SDL_SCANCODE_BRIGHTNESSDOWN: SDL_Scancode = 275;
pub const SDL_Scancode_SDL_SCANCODE_BRIGHTNESSUP: SDL_Scancode = 276;
#[doc = "< display mirroring/dual display"]
#[doc = "switch, video mode switch"]
pub const SDL_Scancode_SDL_SCANCODE_DISPLAYSWITCH: SDL_Scancode = 277;
pub const SDL_Scancode_SDL_SCANCODE_KBDILLUMTOGGLE: SDL_Scancode = 278;
pub const SDL_Scancode_SDL_SCANCODE_KBDILLUMDOWN: SDL_Scancode = 279;
pub const SDL_Scancode_SDL_SCANCODE_KBDILLUMUP: SDL_Scancode = 280;
pub const SDL_Scancode_SDL_SCANCODE_EJECT: SDL_Scancode = 281;
pub const SDL_Scancode_SDL_SCANCODE_SLEEP: SDL_Scancode = 282;
pub const SDL_Scancode_SDL_SCANCODE_APP1: SDL_Scancode = 283;
pub const SDL_Scancode_SDL_SCANCODE_APP2: SDL_Scancode = 284;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOREWIND: SDL_Scancode = 285;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOFASTFORWARD: SDL_Scancode = 286;
#[doc = "< not a key, just marks the number of scancodes"]
#[doc = "for array bounds"]
pub const SDL_Scancode_SDL_NUM_SCANCODES: SDL_Scancode = 512;
pub type SDL_Scancode = u32;
pub const SDLK_UNKNOWN: _bindgen_ty_1 = 0;
pub const SDLK_RETURN: _bindgen_ty_1 = 13;
pub const SDLK_ESCAPE: _bindgen_ty_1 = 27;
pub const SDLK_BACKSPACE: _bindgen_ty_1 = 8;
pub const SDLK_TAB: _bindgen_ty_1 = 9;
pub const SDLK_SPACE: _bindgen_ty_1 = 32;
pub const SDLK_EXCLAIM: _bindgen_ty_1 = 33;
pub const SDLK_QUOTEDBL: _bindgen_ty_1 = 34;
pub const SDLK_HASH: _bindgen_ty_1 = 35;
pub const SDLK_PERCENT: _bindgen_ty_1 = 37;
pub const SDLK_DOLLAR: _bindgen_ty_1 = 36;
pub const SDLK_AMPERSAND: _bindgen_ty_1 = 38;
pub const SDLK_QUOTE: _bindgen_ty_1 = 39;
pub const SDLK_LEFTPAREN: _bindgen_ty_1 = 40;
pub const SDLK_RIGHTPAREN: _bindgen_ty_1 = 41;
pub const SDLK_ASTERISK: _bindgen_ty_1 = 42;
pub const SDLK_PLUS: _bindgen_ty_1 = 43;
pub const SDLK_COMMA: _bindgen_ty_1 = 44;
pub const SDLK_MINUS: _bindgen_ty_1 = 45;
pub const SDLK_PERIOD: _bindgen_ty_1 = 46;
pub const SDLK_SLASH: _bindgen_ty_1 = 47;
pub const SDLK_0: _bindgen_ty_1 = 48;
pub const SDLK_1: _bindgen_ty_1 = 49;
pub const SDLK_2: _bindgen_ty_1 = 50;
pub const SDLK_3: _bindgen_ty_1 = 51;
pub const SDLK_4: _bindgen_ty_1 = 52;
pub const SDLK_5: _bindgen_ty_1 = 53;
pub const SDLK_6: _bindgen_ty_1 = 54;
pub const SDLK_7: _bindgen_ty_1 = 55;
pub const SDLK_8: _bindgen_ty_1 = 56;
pub const SDLK_9: _bindgen_ty_1 = 57;
pub const SDLK_COLON: _bindgen_ty_1 = 58;
pub const SDLK_SEMICOLON: _bindgen_ty_1 = 59;
pub const SDLK_LESS: _bindgen_ty_1 = 60;
pub const SDLK_EQUALS: _bindgen_ty_1 = 61;
pub const SDLK_GREATER: _bindgen_ty_1 = 62;
pub const SDLK_QUESTION: _bindgen_ty_1 = 63;
pub const SDLK_AT: _bindgen_ty_1 = 64;
pub const SDLK_LEFTBRACKET: _bindgen_ty_1 = 91;
pub const SDLK_BACKSLASH: _bindgen_ty_1 = 92;
pub const SDLK_RIGHTBRACKET: _bindgen_ty_1 = 93;
pub const SDLK_CARET: _bindgen_ty_1 = 94;
pub const SDLK_UNDERSCORE: _bindgen_ty_1 = 95;
pub const SDLK_BACKQUOTE: _bindgen_ty_1 = 96;
pub const SDLK_a: _bindgen_ty_1 = 97;
pub const SDLK_b: _bindgen_ty_1 = 98;
pub const SDLK_c: _bindgen_ty_1 = 99;
pub const SDLK_d: _bindgen_ty_1 = 100;
pub const SDLK_e: _bindgen_ty_1 = 101;
pub const SDLK_f: _bindgen_ty_1 = 102;
pub const SDLK_g: _bindgen_ty_1 = 103;
pub const SDLK_h: _bindgen_ty_1 = 104;
pub const SDLK_i: _bindgen_ty_1 = 105;
pub const SDLK_j: _bindgen_ty_1 = 106;
pub const SDLK_k: _bindgen_ty_1 = 107;
pub const SDLK_l: _bindgen_ty_1 = 108;
pub const SDLK_m: _bindgen_ty_1 = 109;
pub const SDLK_n: _bindgen_ty_1 = 110;
pub const SDLK_o: _bindgen_ty_1 = 111;
pub const SDLK_p: _bindgen_ty_1 = 112;
pub const SDLK_q: _bindgen_ty_1 = 113;
pub const SDLK_r: _bindgen_ty_1 = 114;
pub const SDLK_s: _bindgen_ty_1 = 115;
pub const SDLK_t: _bindgen_ty_1 = 116;
pub const SDLK_u: _bindgen_ty_1 = 117;
pub const SDLK_v: _bindgen_ty_1 = 118;
pub const SDLK_w: _bindgen_ty_1 = 119;
pub const SDLK_x: _bindgen_ty_1 = 120;
pub const SDLK_y: _bindgen_ty_1 = 121;
pub const SDLK_z: _bindgen_ty_1 = 122;
pub const SDLK_CAPSLOCK: _bindgen_ty_1 = 1073741881;
pub const SDLK_F1: _bindgen_ty_1 = 1073741882;
pub const SDLK_F2: _bindgen_ty_1 = 1073741883;
pub const SDLK_F3: _bindgen_ty_1 = 1073741884;
pub const SDLK_F4: _bindgen_ty_1 = 1073741885;
pub const SDLK_F5: _bindgen_ty_1 = 1073741886;
pub const SDLK_F6: _bindgen_ty_1 = 1073741887;
pub const SDLK_F7: _bindgen_ty_1 = 1073741888;
pub const SDLK_F8: _bindgen_ty_1 = 1073741889;
pub const SDLK_F9: _bindgen_ty_1 = 1073741890;
pub const SDLK_F10: _bindgen_ty_1 = 1073741891;
pub const SDLK_F11: _bindgen_ty_1 = 1073741892;
pub const SDLK_F12: _bindgen_ty_1 = 1073741893;
pub const SDLK_PRINTSCREEN: _bindgen_ty_1 = 1073741894;
pub const SDLK_SCROLLLOCK: _bindgen_ty_1 = 1073741895;
pub const SDLK_PAUSE: _bindgen_ty_1 = 1073741896;
pub const SDLK_INSERT: _bindgen_ty_1 = 1073741897;
pub const SDLK_HOME: _bindgen_ty_1 = 1073741898;
pub const SDLK_PAGEUP: _bindgen_ty_1 = 1073741899;
pub const SDLK_DELETE: _bindgen_ty_1 = 127;
pub const SDLK_END: _bindgen_ty_1 = 1073741901;
pub const SDLK_PAGEDOWN: _bindgen_ty_1 = 1073741902;
pub const SDLK_RIGHT: _bindgen_ty_1 = 1073741903;
pub const SDLK_LEFT: _bindgen_ty_1 = 1073741904;
pub const SDLK_DOWN: _bindgen_ty_1 = 1073741905;
pub const SDLK_UP: _bindgen_ty_1 = 1073741906;
pub const SDLK_NUMLOCKCLEAR: _bindgen_ty_1 = 1073741907;
pub const SDLK_KP_DIVIDE: _bindgen_ty_1 = 1073741908;
pub const SDLK_KP_MULTIPLY: _bindgen_ty_1 = 1073741909;
pub const SDLK_KP_MINUS: _bindgen_ty_1 = 1073741910;
pub const SDLK_KP_PLUS: _bindgen_ty_1 = 1073741911;
pub const SDLK_KP_ENTER: _bindgen_ty_1 = 1073741912;
pub const SDLK_KP_1: _bindgen_ty_1 = 1073741913;
pub const SDLK_KP_2: _bindgen_ty_1 = 1073741914;
pub const SDLK_KP_3: _bindgen_ty_1 = 1073741915;
pub const SDLK_KP_4: _bindgen_ty_1 = 1073741916;
pub const SDLK_KP_5: _bindgen_ty_1 = 1073741917;
pub const SDLK_KP_6: _bindgen_ty_1 = 1073741918;
pub const SDLK_KP_7: _bindgen_ty_1 = 1073741919;
pub const SDLK_KP_8: _bindgen_ty_1 = 1073741920;
pub const SDLK_KP_9: _bindgen_ty_1 = 1073741921;
pub const SDLK_KP_0: _bindgen_ty_1 = 1073741922;
pub const SDLK_KP_PERIOD: _bindgen_ty_1 = 1073741923;
pub const SDLK_APPLICATION: _bindgen_ty_1 = 1073741925;
pub const SDLK_POWER: _bindgen_ty_1 = 1073741926;
pub const SDLK_KP_EQUALS: _bindgen_ty_1 = 1073741927;
pub const SDLK_F13: _bindgen_ty_1 = 1073741928;
pub const SDLK_F14: _bindgen_ty_1 = 1073741929;
pub const SDLK_F15: _bindgen_ty_1 = 1073741930;
pub const SDLK_F16: _bindgen_ty_1 = 1073741931;
pub const SDLK_F17: _bindgen_ty_1 = 1073741932;
pub const SDLK_F18: _bindgen_ty_1 = 1073741933;
pub const SDLK_F19: _bindgen_ty_1 = 1073741934;
pub const SDLK_F20: _bindgen_ty_1 = 1073741935;
pub const SDLK_F21: _bindgen_ty_1 = 1073741936;
pub const SDLK_F22: _bindgen_ty_1 = 1073741937;
pub const SDLK_F23: _bindgen_ty_1 = 1073741938;
pub const SDLK_F24: _bindgen_ty_1 = 1073741939;
pub const SDLK_EXECUTE: _bindgen_ty_1 = 1073741940;
pub const SDLK_HELP: _bindgen_ty_1 = 1073741941;
pub const SDLK_MENU: _bindgen_ty_1 = 1073741942;
pub const SDLK_SELECT: _bindgen_ty_1 = 1073741943;
pub const SDLK_STOP: _bindgen_ty_1 = 1073741944;
pub const SDLK_AGAIN: _bindgen_ty_1 = 1073741945;
pub const SDLK_UNDO: _bindgen_ty_1 = 1073741946;
pub const SDLK_CUT: _bindgen_ty_1 = 1073741947;
pub const SDLK_COPY: _bindgen_ty_1 = 1073741948;
pub const SDLK_PASTE: _bindgen_ty_1 = 1073741949;
pub const SDLK_FIND: _bindgen_ty_1 = 1073741950;
pub const SDLK_MUTE: _bindgen_ty_1 = 1073741951;
pub const SDLK_VOLUMEUP: _bindgen_ty_1 = 1073741952;
pub const SDLK_VOLUMEDOWN: _bindgen_ty_1 = 1073741953;
pub const SDLK_KP_COMMA: _bindgen_ty_1 = 1073741957;
pub const SDLK_KP_EQUALSAS400: _bindgen_ty_1 = 1073741958;
pub const SDLK_ALTERASE: _bindgen_ty_1 = 1073741977;
pub const SDLK_SYSREQ: _bindgen_ty_1 = 1073741978;
pub const SDLK_CANCEL: _bindgen_ty_1 = 1073741979;
pub const SDLK_CLEAR: _bindgen_ty_1 = 1073741980;
pub const SDLK_PRIOR: _bindgen_ty_1 = 1073741981;
pub const SDLK_RETURN2: _bindgen_ty_1 = 1073741982;
pub const SDLK_SEPARATOR: _bindgen_ty_1 = 1073741983;
pub const SDLK_OUT: _bindgen_ty_1 = 1073741984;
pub const SDLK_OPER: _bindgen_ty_1 = 1073741985;
pub const SDLK_CLEARAGAIN: _bindgen_ty_1 = 1073741986;
pub const SDLK_CRSEL: _bindgen_ty_1 = 1073741987;
pub const SDLK_EXSEL: _bindgen_ty_1 = 1073741988;
pub const SDLK_KP_00: _bindgen_ty_1 = 1073742000;
pub const SDLK_KP_000: _bindgen_ty_1 = 1073742001;
pub const SDLK_THOUSANDSSEPARATOR: _bindgen_ty_1 = 1073742002;
pub const SDLK_DECIMALSEPARATOR: _bindgen_ty_1 = 1073742003;
pub const SDLK_CURRENCYUNIT: _bindgen_ty_1 = 1073742004;
pub const SDLK_CURRENCYSUBUNIT: _bindgen_ty_1 = 1073742005;
pub const SDLK_KP_LEFTPAREN: _bindgen_ty_1 = 1073742006;
pub const SDLK_KP_RIGHTPAREN: _bindgen_ty_1 = 1073742007;
pub const SDLK_KP_LEFTBRACE: _bindgen_ty_1 = 1073742008;
pub const SDLK_KP_RIGHTBRACE: _bindgen_ty_1 = 1073742009;
pub const SDLK_KP_TAB: _bindgen_ty_1 = 1073742010;
pub const SDLK_KP_BACKSPACE: _bindgen_ty_1 = 1073742011;
pub const SDLK_KP_A: _bindgen_ty_1 = 1073742012;
pub const SDLK_KP_B: _bindgen_ty_1 = 1073742013;
pub const SDLK_KP_C: _bindgen_ty_1 = 1073742014;
pub const SDLK_KP_D: _bindgen_ty_1 = 1073742015;
pub const SDLK_KP_E: _bindgen_ty_1 = 1073742016;
pub const SDLK_KP_F: _bindgen_ty_1 = 1073742017;
pub const SDLK_KP_XOR: _bindgen_ty_1 = 1073742018;
pub const SDLK_KP_POWER: _bindgen_ty_1 = 1073742019;
pub const SDLK_KP_PERCENT: _bindgen_ty_1 = 1073742020;
pub const SDLK_KP_LESS: _bindgen_ty_1 = 1073742021;
pub const SDLK_KP_GREATER: _bindgen_ty_1 = 1073742022;
pub const SDLK_KP_AMPERSAND: _bindgen_ty_1 = 1073742023;
pub const SDLK_KP_DBLAMPERSAND: _bindgen_ty_1 = 1073742024;
pub const SDLK_KP_VERTICALBAR: _bindgen_ty_1 = 1073742025;
pub const SDLK_KP_DBLVERTICALBAR: _bindgen_ty_1 = 1073742026;
pub const SDLK_KP_COLON: _bindgen_ty_1 = 1073742027;
pub const SDLK_KP_HASH: _bindgen_ty_1 = 1073742028;
pub const SDLK_KP_SPACE: _bindgen_ty_1 = 1073742029;
pub const SDLK_KP_AT: _bindgen_ty_1 = 1073742030;
pub const SDLK_KP_EXCLAM: _bindgen_ty_1 = 1073742031;
pub const SDLK_KP_MEMSTORE: _bindgen_ty_1 = 1073742032;
pub const SDLK_KP_MEMRECALL: _bindgen_ty_1 = 1073742033;
pub const SDLK_KP_MEMCLEAR: _bindgen_ty_1 = 1073742034;
pub const SDLK_KP_MEMADD: _bindgen_ty_1 = 1073742035;
pub const SDLK_KP_MEMSUBTRACT: _bindgen_ty_1 = 1073742036;
pub const SDLK_KP_MEMMULTIPLY: _bindgen_ty_1 = 1073742037;
pub const SDLK_KP_MEMDIVIDE: _bindgen_ty_1 = 1073742038;
pub const SDLK_KP_PLUSMINUS: _bindgen_ty_1 = 1073742039;
pub const SDLK_KP_CLEAR: _bindgen_ty_1 = 1073742040;
pub const SDLK_KP_CLEARENTRY: _bindgen_ty_1 = 1073742041;
pub const SDLK_KP_BINARY: _bindgen_ty_1 = 1073742042;
pub const SDLK_KP_OCTAL: _bindgen_ty_1 = 1073742043;
pub const SDLK_KP_DECIMAL: _bindgen_ty_1 = 1073742044;
pub const SDLK_KP_HEXADECIMAL: _bindgen_ty_1 = 1073742045;
pub const SDLK_LCTRL: _bindgen_ty_1 = 1073742048;
pub const SDLK_LSHIFT: _bindgen_ty_1 = 1073742049;
pub const SDLK_LALT: _bindgen_ty_1 = 1073742050;
pub const SDLK_LGUI: _bindgen_ty_1 = 1073742051;
pub const SDLK_RCTRL: _bindgen_ty_1 = 1073742052;
pub const SDLK_RSHIFT: _bindgen_ty_1 = 1073742053;
pub const SDLK_RALT: _bindgen_ty_1 = 1073742054;
pub const SDLK_RGUI: _bindgen_ty_1 = 1073742055;
pub const SDLK_MODE: _bindgen_ty_1 = 1073742081;
pub const SDLK_AUDIONEXT: _bindgen_ty_1 = 1073742082;
pub const SDLK_AUDIOPREV: _bindgen_ty_1 = 1073742083;
pub const SDLK_AUDIOSTOP: _bindgen_ty_1 = 1073742084;
pub const SDLK_AUDIOPLAY: _bindgen_ty_1 = 1073742085;
pub const SDLK_AUDIOMUTE: _bindgen_ty_1 = 1073742086;
pub const SDLK_MEDIASELECT: _bindgen_ty_1 = 1073742087;
pub const SDLK_WWW: _bindgen_ty_1 = 1073742088;
pub const SDLK_MAIL: _bindgen_ty_1 = 1073742089;
pub const SDLK_CALCULATOR: _bindgen_ty_1 = 1073742090;
pub const SDLK_COMPUTER: _bindgen_ty_1 = 1073742091;
pub const SDLK_AC_SEARCH: _bindgen_ty_1 = 1073742092;
pub const SDLK_AC_HOME: _bindgen_ty_1 = 1073742093;
pub const SDLK_AC_BACK: _bindgen_ty_1 = 1073742094;
pub const SDLK_AC_FORWARD: _bindgen_ty_1 = 1073742095;
pub const SDLK_AC_STOP: _bindgen_ty_1 = 1073742096;
pub const SDLK_AC_REFRESH: _bindgen_ty_1 = 1073742097;
pub const SDLK_AC_BOOKMARKS: _bindgen_ty_1 = 1073742098;
pub const SDLK_BRIGHTNESSDOWN: _bindgen_ty_1 = 1073742099;
pub const SDLK_BRIGHTNESSUP: _bindgen_ty_1 = 1073742100;
pub const SDLK_DISPLAYSWITCH: _bindgen_ty_1 = 1073742101;
pub const SDLK_KBDILLUMTOGGLE: _bindgen_ty_1 = 1073742102;
pub const SDLK_KBDILLUMDOWN: _bindgen_ty_1 = 1073742103;
pub const SDLK_KBDILLUMUP: _bindgen_ty_1 = 1073742104;
pub const SDLK_EJECT: _bindgen_ty_1 = 1073742105;
pub const SDLK_SLEEP: _bindgen_ty_1 = 1073742106;
pub const SDLK_APP1: _bindgen_ty_1 = 1073742107;
pub const SDLK_APP2: _bindgen_ty_1 = 1073742108;
pub const SDLK_AUDIOREWIND: _bindgen_ty_1 = 1073742109;
pub const SDLK_AUDIOFASTFORWARD: _bindgen_ty_1 = 1073742110;
pub type _bindgen_ty_1 = u32;
pub const SDL_Keymod_KMOD_NONE: SDL_Keymod = 0;
pub const SDL_Keymod_KMOD_LSHIFT: SDL_Keymod = 1;
pub const SDL_Keymod_KMOD_RSHIFT: SDL_Keymod = 2;
pub const SDL_Keymod_KMOD_LCTRL: SDL_Keymod = 64;
pub const SDL_Keymod_KMOD_RCTRL: SDL_Keymod = 128;
pub const SDL_Keymod_KMOD_LALT: SDL_Keymod = 256;
pub const SDL_Keymod_KMOD_RALT: SDL_Keymod = 512;
pub const SDL_Keymod_KMOD_LGUI: SDL_Keymod = 1024;
pub const SDL_Keymod_KMOD_RGUI: SDL_Keymod = 2048;
pub const SDL_Keymod_KMOD_NUM: SDL_Keymod = 4096;
pub const SDL_Keymod_KMOD_CAPS: SDL_Keymod = 8192;
pub const SDL_Keymod_KMOD_MODE: SDL_Keymod = 16384;
pub const SDL_Keymod_KMOD_RESERVED: SDL_Keymod = 32768;
pub type SDL_Keymod = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Body {
    pub shape: ShapeID,
    pub layer: Layer,
    pub offset: Vec2,
    pub rotation: f32,
    pub position: Vec2,
    pub scale: Vec2,
    pub velocity: Vec2,
    pub acceleration: Vec2,
    pub force: Vec2,
    pub inverse_mass: f32,
    pub damping: f32,
    pub bounce: f32,
}
#[test]
fn bindgen_test_layout_Body() {
    assert_eq!(
        ::std::mem::size_of::<Body>(),
        72usize,
        concat!("Size of: ", stringify!(Body))
    );
    assert_eq!(
        ::std::mem::align_of::<Body>(),
        4usize,
        concat!("Alignment of ", stringify!(Body))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).shape as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).layer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).rotation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).position as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).scale as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).velocity as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).acceleration as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(acceleration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).force as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(force)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).inverse_mass as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(inverse_mass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).damping as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(damping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Body>())).bounce as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Body),
            "::",
            stringify!(bounce)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Overlap {
    pub a: *mut Body,
    pub b: *mut Body,
    pub depth: f32,
    pub normal: Vec2,
    pub is_valid: b8,
}
#[test]
fn bindgen_test_layout_Overlap() {
    assert_eq!(
        ::std::mem::size_of::<Overlap>(),
        32usize,
        concat!("Size of: ", stringify!(Overlap))
    );
    assert_eq!(
        ::std::mem::align_of::<Overlap>(),
        8usize,
        concat!("Alignment of ", stringify!(Overlap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Overlap>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Overlap),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Overlap>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Overlap),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Overlap>())).depth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Overlap),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Overlap>())).normal as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Overlap),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Overlap>())).is_valid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Overlap),
            "::",
            stringify!(is_valid)
        )
    );
}
pub const At_PRE_UPDATE: At = 0;
pub const At_POST_UPDATE: At = 1;
pub const At_PRE_DRAW: At = 2;
pub const At_POST_DRAW: At = 3;
pub const At_COUNT: At = 4;
pub type At = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LogicID {
    pub at: At,
    pub slot: s16,
    pub gen: u8,
}
#[test]
fn bindgen_test_layout_LogicID() {
    assert_eq!(
        ::std::mem::size_of::<LogicID>(),
        8usize,
        concat!("Size of: ", stringify!(LogicID))
    );
    assert_eq!(
        ::std::mem::align_of::<LogicID>(),
        4usize,
        concat!("Alignment of ", stringify!(LogicID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicID>())).at as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicID),
            "::",
            stringify!(at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicID>())).slot as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicID),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LogicID>())).gen as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(LogicID),
            "::",
            stringify!(gen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Span {
    pub min: f32,
    pub max: f32,
}
#[test]
fn bindgen_test_layout_Span() {
    assert_eq!(
        ::std::mem::size_of::<Span>(),
        8usize,
        concat!("Size of: ", stringify!(Span))
    );
    assert_eq!(
        ::std::mem::align_of::<Span>(),
        4usize,
        concat!("Alignment of ", stringify!(Span))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Span>())).min as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Span), "::", stringify!(min))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Span>())).max as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Span), "::", stringify!(max))
    );
}
pub const Player_NONE: Player = 0;
pub const Player_P1: Player = 1;
pub const Player_P2: Player = 2;
pub const Player_P3: Player = 4;
pub const Player_P4: Player = 8;
pub const Player_NUM: Player = 4;
pub const Player_ANY: Player = 15;
pub type Player = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioID {
    pub gen: u8,
    pub slot: u16,
}
#[test]
fn bindgen_test_layout_AudioID() {
    assert_eq!(
        ::std::mem::size_of::<AudioID>(),
        4usize,
        concat!("Size of: ", stringify!(AudioID))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioID>(),
        2usize,
        concat!("Alignment of ", stringify!(AudioID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioID>())).gen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioID),
            "::",
            stringify!(gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioID>())).slot as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioID),
            "::",
            stringify!(slot)
        )
    );
}
#[doc = "* Camera struct"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Camera {
    pub position: Vec2,
    pub offset: Vec2,
    pub zoom: f32,
    pub aspect_ratio: f32,
    pub _padding_: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_Camera() {
    assert_eq!(
        ::std::mem::size_of::<Camera>(),
        32usize,
        concat!("Size of: ", stringify!(Camera))
    );
    assert_eq!(
        ::std::mem::align_of::<Camera>(),
        4usize,
        concat!("Alignment of ", stringify!(Camera))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Camera>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Camera),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Camera>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Camera),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Camera>())).zoom as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Camera),
            "::",
            stringify!(zoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Camera>())).aspect_ratio as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Camera),
            "::",
            stringify!(aspect_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Camera>()))._padding_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Camera),
            "::",
            stringify!(_padding_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Window {
    pub width: f32,
    pub height: f32,
    pub aspect_ratio: f32,
    pub _padding_: f32,
}
#[test]
fn bindgen_test_layout_Window() {
    assert_eq!(
        ::std::mem::size_of::<Window>(),
        16usize,
        concat!("Size of: ", stringify!(Window))
    );
    assert_eq!(
        ::std::mem::align_of::<Window>(),
        4usize,
        concat!("Alignment of ", stringify!(Window))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Window>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Window),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Window>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Window),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Window>())).aspect_ratio as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Window),
            "::",
            stringify!(aspect_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Window>()))._padding_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Window),
            "::",
            stringify!(_padding_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ParticleSystem {
    pub num_sprites: u32,
    pub layer: u32,
    pub sprites: [AssetID; 32usize],
    pub head: u32,
    pub tail: u32,
    pub max_num_particles: u32,
    pub particles: *mut ::std::os::raw::c_void,
    pub memory: *mut ::std::os::raw::c_void,
    pub relative: u8,
    pub keep_alive: u8,
    pub one_color: u8,
    pub one_alpha: u8,
    pub one_size: u8,
    pub drop_oldest: u8,
    pub position: Vec2,
    pub alive_time: Span,
    pub rotation: Span,
    pub angular_velocity: Span,
    pub position_x: Span,
    pub position_y: Span,
    pub velocity_dir: Span,
    pub velocity: Span,
    pub damping: Span,
    pub acceleration_dir: Span,
    pub acceleration: Span,
    pub spawn_size: Span,
    pub spawn_size_deriv: Span,
    pub die_size: Span,
    pub die_size_deriv: Span,
    pub width: Span,
    pub height: Span,
    pub spawn_red: Span,
    pub spawn_green: Span,
    pub spawn_blue: Span,
    pub spawn_alpha: Span,
    pub spawn_color_deriv: Span,
    pub die_red: Span,
    pub die_green: Span,
    pub die_blue: Span,
    pub die_alpha: Span,
    pub die_color_deriv: Span,
    pub progress_func_size: ProgressFuncF32,
    pub progress_func_color: ProgressFuncVec4,
}
#[test]
fn bindgen_test_layout_ParticleSystem() {
    assert_eq!(
        ::std::mem::size_of::<ParticleSystem>(),
        536usize,
        concat!("Size of: ", stringify!(ParticleSystem))
    );
    assert_eq!(
        ::std::mem::align_of::<ParticleSystem>(),
        8usize,
        concat!("Alignment of ", stringify!(ParticleSystem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).num_sprites as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(num_sprites)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).layer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).sprites as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(sprites)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).head as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).tail as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParticleSystem>())).max_num_particles as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(max_num_particles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).particles as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(particles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).memory as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).relative as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).keep_alive as *const _ as usize },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(keep_alive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).one_color as *const _ as usize },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(one_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).one_alpha as *const _ as usize },
        299usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(one_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).one_size as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(one_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).drop_oldest as *const _ as usize },
        301usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(drop_oldest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).position as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).alive_time as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(alive_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).rotation as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).angular_velocity as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(angular_velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).position_x as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(position_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).position_y as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(position_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).velocity_dir as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(velocity_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).velocity as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).damping as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(damping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).acceleration_dir as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(acceleration_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).acceleration as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(acceleration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).spawn_size as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(spawn_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).spawn_size_deriv as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(spawn_size_deriv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).die_size as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(die_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).die_size_deriv as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(die_size_deriv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).width as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).height as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).spawn_red as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(spawn_red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).spawn_green as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(spawn_green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).spawn_blue as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(spawn_blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).spawn_alpha as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(spawn_alpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParticleSystem>())).spawn_color_deriv as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(spawn_color_deriv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).die_red as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(die_red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).die_green as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(die_green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).die_blue as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(die_blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).die_alpha as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(die_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParticleSystem>())).die_color_deriv as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(die_color_deriv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParticleSystem>())).progress_func_size as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(progress_func_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParticleSystem>())).progress_func_color as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ParticleSystem),
            "::",
            stringify!(progress_func_color)
        )
    );
}
pub const MarkerID_MAIN: MarkerID = 0;
pub const MarkerID_INPUT: MarkerID = 1;
pub const MarkerID_RENDER: MarkerID = 2;
pub const MarkerID_TEXT: MarkerID = 3;
pub const MarkerID_ENTITY_UPDATE: MarkerID = 4;
pub const MarkerID_ENTITY_DRAW: MarkerID = 5;
pub const MarkerID_ENTITY_DEFRAG: MarkerID = 6;
pub const MarkerID_AUDIO: MarkerID = 7;
pub const MarkerID_AUDIO_SOURCES: MarkerID = 8;
pub const MarkerID_AUDIO_EFFECTS: MarkerID = 9;
pub const MarkerID_NUMBER_OF_MARKERS: MarkerID = 10;
pub type MarkerID = u32;
pub const ASSET_ID_NO_ASSET: AssetID = 4294967295;
pub const FOREVER: f32 = -1.0;
pub const ONCE: f32 = 0.0;
pub const AUDIO_DEFAULT_GAIN: f32 = 0.20000000298023224;
pub const AUDIO_DEFAULT_VARIANCE: f32 = 0.009999999776482582;
extern "C" {
    pub fn fog_asset_fetch_id(str: *const ::std::os::raw::c_char) -> AssetID;
}
extern "C" {
    pub fn fog_test_func();
}
extern "C" {
    pub fn fog_init(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn fog_quit();
}
extern "C" {
    pub fn fog_run(update: FogCallback, draw: FogCallback);
}
extern "C" {
    pub fn fog_update();
}
extern "C" {
    pub fn fog_draw();
}
extern "C" {
    pub fn fog_physics_add_shape(points_length: u32, points: *mut Vec2) -> ShapeID;
}
extern "C" {
    pub fn fog_physics_create_body(shape_id: ShapeID, mass: f32) -> Body;
}
extern "C" {
    pub fn fog_physics_center_body(body: *mut Body);
}
extern "C" {
    pub fn fog_physics_swap_shape(body: *mut Body, shape: ShapeID);
}
extern "C" {
    pub fn fog_physics_check_overlap(body_a: *mut Body, body_b: *mut Body) -> Overlap;
}
extern "C" {
    pub fn fog_physics_solve(overlap: Overlap);
}
extern "C" {
    pub fn fog_physics_point_in_box(p: Vec2, center: Vec2, radius: Vec2, rotation: f32) -> b8;
}
extern "C" {
    pub fn fog_physics_point_in_box_region(p: Vec2, min: Vec2, max: Vec2) -> b8;
}
extern "C" {
    pub fn fog_physics_integrate(body: *mut Body, delta: f32);
}
extern "C" {
    pub fn fog_physics_debug_draw_body(body: *mut Body);
}
extern "C" {
    pub fn fog_logic_add_callback(at: At, callback: Callback, start: f32) -> LogicID;
}
extern "C" {
    pub fn fog_logic_update_callback(
        id: LogicID,
        callback: Callback,
        start: f32,
        end: f32,
        spacing: f32,
        aux: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fog_logic_remove_callback(id: LogicID);
}
extern "C" {
    pub fn fog_logic_now() -> f32;
}
extern "C" {
    pub fn fog_logic_delta() -> f32;
}
extern "C" {
    pub fn fog_inside(p1: Vec2, p2: Vec2, q: Vec2) -> b8;
}
extern "C" {
    pub fn fog_winding_direction(p1: Vec2, p2: Vec2, p3: Vec2) -> f32;
}
extern "C" {
    pub fn fog_std_progress_func_f32(
        start_value: f32,
        start_slope: f32,
        end_value: f32,
        end_slope: f32,
        progress: f32,
    ) -> f32;
}
extern "C" {
    pub fn fog_std_progress_func_vec4(
        start_value: Vec4,
        start_slope: f32,
        end_value: Vec4,
        end_slope: f32,
        progress: f32,
    ) -> Vec4;
}
extern "C" {
    pub fn fog_V2(x: real, y: real) -> Vec2;
}
extern "C" {
    pub fn fog_V3(x: real, y: real, z: real) -> Vec3;
}
extern "C" {
    pub fn fog_V4(x: real, y: real, z: real, w: real) -> Vec4;
}
extern "C" {
    pub fn fog_dot_v2(a: Vec2, b: Vec2) -> real;
}
extern "C" {
    pub fn fog_length_squared_v2(a: Vec2) -> real;
}
extern "C" {
    pub fn fog_length_v2(a: Vec2) -> real;
}
extern "C" {
    pub fn fog_distance_v2(a: Vec2, b: Vec2) -> real;
}
extern "C" {
    pub fn fog_normalize_v2(a: Vec2) -> Vec2;
}
extern "C" {
    pub fn fog_hadamard_v2(a: Vec2, b: Vec2) -> Vec2;
}
extern "C" {
    pub fn fog_inverse_v2(a: Vec2) -> Vec2;
}
extern "C" {
    pub fn fog_rotate_ccw_v2(p: Vec2) -> Vec2;
}
extern "C" {
    pub fn fog_rotate_v2(p: Vec2, angle: real) -> Vec2;
}
extern "C" {
    pub fn fog_angle_v2(p: Vec2) -> real;
}
extern "C" {
    pub fn fog_look_at_v2(from: Vec2, to: Vec2) -> real;
}
extern "C" {
    pub fn fog_neg_v2(self_: Vec2) -> Vec2;
}
extern "C" {
    pub fn fog_add_v2(self_: Vec2, other: Vec2) -> Vec2;
}
extern "C" {
    pub fn fog_sub_v2(self_: Vec2, other: Vec2) -> Vec2;
}
extern "C" {
    pub fn fog_mul_v2(self_: Vec2, scaler: real) -> Vec2;
}
extern "C" {
    pub fn fog_div_v2(self_: Vec2, scaler: real) -> Vec2;
}
extern "C" {
    pub fn fog_eq_v2(self_: Vec2, other: Vec2) -> b8;
}
extern "C" {
    pub fn fog_dot_v3(a: Vec3, b: Vec3) -> real;
}
extern "C" {
    pub fn fog_cross_v3(a: Vec3, b: Vec3) -> Vec3;
}
extern "C" {
    pub fn fog_length_cubed_v3(a: Vec3) -> real;
}
extern "C" {
    pub fn fog_length_squared_v3(a: Vec3) -> real;
}
extern "C" {
    pub fn fog_length_v3(a: Vec3) -> real;
}
extern "C" {
    pub fn fog_normalize_v3(a: Vec3) -> Vec3;
}
extern "C" {
    pub fn fog_neg_v3(self_: Vec3) -> Vec3;
}
extern "C" {
    pub fn fog_add_v3(self_: Vec3, other: Vec3) -> Vec3;
}
extern "C" {
    pub fn fog_sub_v3(self_: Vec3, other: Vec3) -> Vec3;
}
extern "C" {
    pub fn fog_mul_v3(self_: Vec3, scaler: real) -> Vec3;
}
extern "C" {
    pub fn fog_div_v3(self_: Vec3, scaler: real) -> Vec3;
}
extern "C" {
    pub fn fog_eq_v3(self_: Vec3, other: Vec3) -> b8;
}
extern "C" {
    pub fn fog_dot_v4(a: Vec4, b: Vec4) -> real;
}
extern "C" {
    pub fn fog_length_squared_v4(a: Vec4) -> real;
}
extern "C" {
    pub fn fog_length_v4(a: Vec4) -> real;
}
extern "C" {
    pub fn fog_normalize_v4(a: Vec4) -> Vec4;
}
extern "C" {
    pub fn fog_neg_v4(self_: Vec4) -> Vec4;
}
extern "C" {
    pub fn fog_add_v4(self_: Vec4, other: Vec4) -> Vec4;
}
extern "C" {
    pub fn fog_sub_v4(self_: Vec4, other: Vec4) -> Vec4;
}
extern "C" {
    pub fn fog_mul_v4(self_: Vec4, scaler: real) -> Vec4;
}
extern "C" {
    pub fn fog_div_v4(self_: Vec4, scaler: real) -> Vec4;
}
extern "C" {
    pub fn fog_eq_v4(self_: Vec4, other: Vec4) -> b8;
}
extern "C" {
    pub fn fog_random_bit() -> b8;
}
extern "C" {
    pub fn fog_random_int() -> u32;
}
extern "C" {
    pub fn fog_random_real(low: f32) -> f32;
}
extern "C" {
    pub fn fog_random_unit_vec2() -> Vec2;
}
extern "C" {
    pub fn fog_random_unit_vec3() -> Vec3;
}
extern "C" {
    pub fn fog_input_request_name(num: u32) -> Name;
}
extern "C" {
    pub fn fog_input_using_controller() -> b8;
}
extern "C" {
    pub fn fog_input_start_text_input();
}
extern "C" {
    pub fn fog_input_stop_text_input();
}
extern "C" {
    pub fn fog_input_edit_string(text: *mut ::std::os::raw::c_char, max_length: u32) -> b8;
}
extern "C" {
    pub fn fog_input_add(code: InputCode, name: Name, player: Player) -> b8;
}
extern "C" {
    pub fn fog_input_triggered(name: Name, player: Player) -> b8;
}
extern "C" {
    pub fn fog_input_pressed(name: Name, player: Player) -> b8;
}
extern "C" {
    pub fn fog_input_released(name: Name, player: Player) -> b8;
}
extern "C" {
    pub fn fog_input_down(name: Name, player: Player) -> b8;
}
extern "C" {
    pub fn fog_input_value(name: Name, player: Player) -> f32;
}
extern "C" {
    pub fn fog_input_super_pressed(name: Name, player: Player) -> b8;
}
extern "C" {
    pub fn fog_input_mouse_position() -> Vec2;
}
extern "C" {
    pub fn fog_input_mouse_move() -> Vec2;
}
extern "C" {
    pub fn fog_input_screen_to_world(p: Vec2, camera_id: u32) -> Vec2;
}
extern "C" {
    pub fn fog_input_world_mouse_position(camera_id: u32) -> Vec2;
}
extern "C" {
    pub fn fog_input_normalized_mouse_position() -> Vec2;
}
extern "C" {
    pub fn fog_input_world_mouse_move(camera_id: u32) -> Vec2;
}
extern "C" {
    pub fn fog_input_mouse_depth() -> u32;
}
extern "C" {
    pub fn fog_input_eat_mouse();
}
extern "C" {
    pub fn fog_input_mouse_scroll() -> Vec2;
}
extern "C" {
    pub fn fog_input_mouse_triggered(button: u8) -> b8;
}
extern "C" {
    pub fn fog_input_mouse_pressed(button: u8) -> b8;
}
extern "C" {
    pub fn fog_input_mouse_released(button: u8) -> b8;
}
extern "C" {
    pub fn fog_input_mouse_down(button: u8) -> b8;
}
extern "C" {
    pub fn fog_key_to_input_code(scancode: s32) -> InputCode;
}
extern "C" {
    pub fn fog_axis_to_input_code(scancode: s32, which: s32) -> InputCode;
}
extern "C" {
    pub fn fog_button_to_input_code(scancode: s32, which: s32) -> InputCode;
}
extern "C" {
    pub fn fog_mixer_play_sound(channel_id: u32, asset_id: AssetID, pitch: f32) -> AudioID;
}
extern "C" {
    pub fn fog_mixer_play_sound_at(
        channel_id: u32,
        asset_id: AssetID,
        position: Vec2,
        pitch: f32,
    ) -> AudioID;
}
extern "C" {
    pub fn fog_mixer_stop_sound(id: AudioID);
}
extern "C" {
    pub fn fog_mixer_channel_set_delay(
        channel_id: u32,
        feedback: f32,
        len_seconds: f32,
        in_seconds: f32,
    );
}
extern "C" {
    pub fn fog_mixer_channel_set_lowpass(channel_id: u32, weight: f32, in_seconds: f32);
}
extern "C" {
    pub fn fog_mixer_channel_set_highpass(channel_id: u32, weight: f32, in_seconds: f32);
}
extern "C" {
    pub fn fog_renderer_fetch_camera(camera_id: u32) -> *mut Camera;
}
extern "C" {
    pub fn fog_renderer_get_window() -> *mut Window;
}
extern "C" {
    pub fn fog_renderer_get_window_width() -> f32;
}
extern "C" {
    pub fn fog_renderer_get_window_height() -> f32;
}
extern "C" {
    pub fn fog_renderer_get_window_aspect_ratio() -> f32;
}
extern "C" {
    pub fn fog_renderer_camera_shake(camera: *mut Camera, shake: Vec2);
}
extern "C" {
    pub fn fog_renderer_camera_lerp(camera_a: Camera, camera_b: Camera, lerp: f32) -> Camera;
}
extern "C" {
    pub fn fog_renderer_camera_smooth(camera_a: Camera, camera_b: Camera, slerp: f32) -> Camera;
}
extern "C" {
    pub fn fog_renderer_camera_fit(num_points: u32, points: *mut Vec2, border: f32) -> Camera;
}
extern "C" {
    pub fn fog_renderer_camera_fit_inplace(
        camera: *mut Camera,
        num_points: u32,
        points: *mut Vec2,
        border: f32,
    );
}
extern "C" {
    pub fn fog_renderer_debug_camera(camera_id: u32);
}
extern "C" {
    pub fn fog_renderer_turn_on_camera(camera_id: u32);
}
extern "C" {
    pub fn fog_renderer_turn_off_camera(camera_id: u32);
}
extern "C" {
    pub fn fog_renderer_push_sprite_rect(
        layer: u32,
        position: Vec2,
        dimension: Vec2,
        angle: f32,
        texture: AssetID,
        uv_min: Vec2,
        uv_dimension: Vec2,
        color: Vec4,
    );
}
extern "C" {
    pub fn fog_renderer_push_rectangle(layer: u32, position: Vec2, dimension: Vec2, color: Vec4);
}
extern "C" {
    pub fn fog_renderer_push_line_gradient(
        layer: u32,
        start: Vec2,
        end: Vec2,
        start_color: Vec4,
        end_color: Vec4,
        thickness: f32,
    );
}
extern "C" {
    pub fn fog_renderer_push_line(layer: u32, start: Vec2, end: Vec2, color: Vec4, thickness: f32);
}
extern "C" {
    pub fn fog_renderer_push_point(layer: u32, point: Vec2, color: Vec4, size: f32);
}
extern "C" {
    pub fn fog_renderer_set_window_position(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fog_renderer_get_window_position() -> Vec2;
}
extern "C" {
    pub fn fog_renderer_set_window_size(w: ::std::os::raw::c_int, h: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fog_renderer_get_window_size() -> Vec2;
}
extern "C" {
    pub fn fog_renderer_set_window_title(title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fog_renderer_set_fullscreen(fullscreen: b8);
}
extern "C" {
    pub fn fog_renderer_toggle_fullscreen();
}
extern "C" {
    pub fn fog_renderer_is_fullscreen() -> b8;
}
extern "C" {
    pub fn fog_renderer_create_particle_system(
        layer: u32,
        num_particles: u32,
        position: Vec2,
    ) -> ParticleSystem;
}
extern "C" {
    pub fn fog_renderer_destroy_particle_system(system: *mut ParticleSystem);
}
extern "C" {
    pub fn fog_renderer_particle_spawn(self_: *mut ParticleSystem, num_particles: u32);
}
extern "C" {
    pub fn fog_renderer_particle_update(self_: *mut ParticleSystem, delta: f32);
}
extern "C" {
    pub fn fog_renderer_particle_draw(self_: *mut ParticleSystem);
}
extern "C" {
    pub fn fog_renderer_particle_clear(self_: *mut ParticleSystem);
}
extern "C" {
    pub fn fog_renderer_particle_add_sprite(self_: *mut ParticleSystem, sprite: AssetID);
}
extern "C" {
    pub fn fog_renderer_messure_text(
        string: *const ::std::os::raw::c_char,
        size: f32,
        font_id: AssetID,
    ) -> Vec2;
}
extern "C" {
    pub fn fog_renderer_draw_text(
        string: *const ::std::os::raw::c_char,
        x: f32,
        y: f32,
        size: f32,
        font_id: AssetID,
        alignment: f32,
    );
}
extern "C" {
    pub fn fog_util_format(
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fog_util_utf8_size(c: *const ::std::os::raw::c_char) -> u8;
}
extern "C" {
    pub fn fog_util_utf8_is_first_char(c: *const ::std::os::raw::c_char) -> b8;
}
extern "C" {
    pub fn fog_util_utf8_insert_glyph(
        to: *mut ::std::os::raw::c_char,
        from: *const ::std::os::raw::c_char,
        length: u32,
    ) -> b8;
}
extern "C" {
    pub fn fog_util_utf8_advance(c: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fog_util_temporary_bytes(num: u64) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fog_util_copy_bytes(
        from: *const ::std::os::raw::c_void,
        to: *mut ::std::os::raw::c_void,
        size: u64,
    );
}
extern "C" {
    pub fn fog_util_allow_allocation();
}
extern "C" {
    pub fn fog_util_allow_all_allocations();
}
extern "C" {
    pub fn fog_util_begin_tweak_section(name: *const ::std::os::raw::c_char, active: *mut b8)
        -> b8;
}
extern "C" {
    pub fn fog_util_end_tweak_section(active: *mut b8);
}
extern "C" {
    pub fn fog_util_tweak_b8(name: *const ::std::os::raw::c_char, value: *mut b8) -> b8;
}
extern "C" {
    pub fn fog_util_tweak_s32(name: *const ::std::os::raw::c_char, value: *mut s32) -> b8;
}
extern "C" {
    pub fn fog_util_tweak_u32(name: *const ::std::os::raw::c_char, value: *mut u32) -> b8;
}
extern "C" {
    pub fn fog_util_tweak_f32(
        name: *const ::std::os::raw::c_char,
        value: *mut f32,
        modifier: f32,
    ) -> b8;
}
extern "C" {
    pub fn fog_util_tweak_vec2(
        name: *const ::std::os::raw::c_char,
        value: *mut Vec2,
        modifier: f32,
    ) -> b8;
}
extern "C" {
    pub fn fog_util_tweak_span(
        name: *const ::std::os::raw::c_char,
        value: *mut Span,
        modifier: f32,
    ) -> b8;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
