// Hi!
// This file is automatically generated C-bindings for the Fog engine,
// if you are planning on editing this, it will probably be overwritten
// on the next compilation. So maybe don't put stuff in here?

#ifdef __cplusplus
#define FOG_IMPORT extern "C"
#else
#define FOG_IMPORT
#endif

using namespace Util;
using namespace Asset;
using namespace Input;
using namespace Mixer;
using namespace Logic;
using namespace Renderer;
using namespace Physics;
FOG_IMPORT ShapeID fog_physics_add_shape(u32 points_length, Vec2 *points) { return Physics::add_shape(points_length, points); }
FOG_IMPORT Body fog_physics_create_body(ShapeID shape_id, f32 mass) { return Physics::create_body(shape_id, mass); }
FOG_IMPORT void fog_physics_center_body(Body *body) { return Physics::center_body(body); }
FOG_IMPORT void fog_physics_swap_shape(Body *body, ShapeID shape) { return Physics::swap_shape(body, shape); }
FOG_IMPORT Overlap fog_physics_check_overlap(Body *body_a, Body *body_b) { return Physics::check_overlap(body_a, body_b); }
FOG_IMPORT void fog_physics_solve(Overlap overlap) { return Physics::solve(overlap); }
FOG_IMPORT bool fog_physics_point_in_box(Vec2 p, Vec2 center, Vec2 radius, f32 rotation) { return Physics::point_in_box(p, center, radius, rotation); }
FOG_IMPORT bool fog_physics_point_in_box_region(Vec2 p, Vec2 min, Vec2 max) { return Physics::point_in_box_region(p, min, max); }
FOG_IMPORT void fog_physics_integrate(Body *body, f32 delta) { return Physics::integrate(body, delta); }
FOG_IMPORT void fog_physics_debug_draw_body(Body *body) { return Physics::debug_draw_body(body); }
FOG_IMPORT LogicID fog_logic_add_callback(At at, Callback callback, f32 start) { return Logic::add_callback(at, callback, start); }
FOG_IMPORT void fog_logic_update_callback(LogicID id, Callback callback, f32 start, f32 end, f32 spacing, void *aux) { return Logic::update_callback(id, callback, start, end, spacing, aux); }
FOG_IMPORT void fog_logic_remove_callback(LogicID id) { return Logic::remove_callback(id); }
FOG_IMPORT f32 fog_logic_now() { return Logic::now(); }
FOG_IMPORT f32 fog_logic_delta() { return Logic::delta(); }
FOG_IMPORT bool fog_inside(Vec2 p1, Vec2 p2, Vec2 q) { return inside(p1, p2, q); }
FOG_IMPORT float fog_winding_direction(Vec2 p1, Vec2 p2, Vec2 p3) { return winding_direction(p1, p2, p3); }
FOG_IMPORT f32 fog_std_progress_func_f32(f32 start_value, f32 start_slope, f32 end_value, f32 end_slope, f32 progress) { return std_progress_func_f32(start_value, start_slope, end_value, end_slope, progress); }
FOG_IMPORT Vec4 fog_std_progress_func_vec4(Vec4 start_value, f32 start_slope, Vec4 end_value, f32 end_slope, f32 progress) { return std_progress_func_vec4(start_value, start_slope, end_value, end_slope, progress); }
FOG_IMPORT real fog_dot_v2(Vec2 a, Vec2 b) { return dot_v2(a, b); }
FOG_IMPORT real fog_length_squared_v2(Vec2 a) { return length_squared_v2(a); }
FOG_IMPORT real fog_length_v2(Vec2 a) { return length_v2(a); }
FOG_IMPORT real fog_distance_v2(Vec2 a, Vec2 b) { return distance_v2(a, b); }
FOG_IMPORT Vec2 fog_normalize_v2(Vec2 a) { return normalize_v2(a); }
FOG_IMPORT Vec2 fog_hadamard_v2(Vec2 a, Vec2 b) { return hadamard_v2(a, b); }
FOG_IMPORT Vec2 fog_inverse_v2(Vec2 a) { return inverse_v2(a); }
FOG_IMPORT Vec2 fog_rotate_ccw_v2(Vec2 p) { return rotate_ccw_v2(p); }
FOG_IMPORT Vec2 fog_rotate_v2(Vec2 p, real angle) { return rotate_v2(p, angle); }
FOG_IMPORT real fog_angle_v2(Vec2 p) { return angle_v2(p); }
FOG_IMPORT real fog_look_at_v2(Vec2 from, Vec2 to) { return look_at_v2(from, to); }
FOG_IMPORT Vec2 fog_neg_v2(Vec2 self) { return neg_v2(self); }
FOG_IMPORT Vec2 fog_add_v2(Vec2 self, Vec2 other) { return add_v2(self, other); }
FOG_IMPORT Vec2 fog_sub_v2(Vec2 self, Vec2 other) { return sub_v2(self, other); }
FOG_IMPORT Vec2 fog_mul_v2(Vec2 self, real scaler) { return mul_v2(self, scaler); }
FOG_IMPORT Vec2 fog_div_v2(Vec2 self, real scaler) { return div_v2(self, scaler); }
FOG_IMPORT bool fog_eq_v2(Vec2 self, Vec2 other) { return eq_v2(self, other); }
FOG_IMPORT real fog_dot_v3(Vec3 a, Vec3 b) { return dot_v3(a, b); }
FOG_IMPORT Vec3 fog_cross_v3(Vec3 a, Vec3 b) { return cross_v3(a, b); }
FOG_IMPORT real fog_length_cubed_v3(Vec3 a) { return length_cubed_v3(a); }
FOG_IMPORT real fog_length_squared_v3(Vec3 a) { return length_squared_v3(a); }
FOG_IMPORT real fog_length_v3(Vec3 a) { return length_v3(a); }
FOG_IMPORT Vec3 fog_normalize_v3(Vec3 a) { return normalize_v3(a); }
FOG_IMPORT Vec3 fog_neg_v3(Vec3 self) { return neg_v3(self); }
FOG_IMPORT Vec3 fog_add_v3(Vec3 self, Vec3 other) { return add_v3(self, other); }
FOG_IMPORT Vec3 fog_sub_v3(Vec3 self, Vec3 other) { return sub_v3(self, other); }
FOG_IMPORT Vec3 fog_mul_v3(Vec3 self, real scaler) { return mul_v3(self, scaler); }
FOG_IMPORT Vec3 fog_div_v3(Vec3 self, real scaler) { return div_v3(self, scaler); }
FOG_IMPORT bool fog_eq_v3(Vec3 self, Vec3 other) { return eq_v3(self, other); }
FOG_IMPORT real fog_dot_v4(Vec4 a, Vec4 b) { return dot_v4(a, b); }
FOG_IMPORT real fog_length_squared_v4(Vec4 a) { return length_squared_v4(a); }
FOG_IMPORT real fog_length_v4(Vec4 a) { return length_v4(a); }
FOG_IMPORT Vec4 fog_normalize_v4(Vec4 a) { return normalize_v4(a); }
FOG_IMPORT Vec4 fog_neg_v4(Vec4 self) { return neg_v4(self); }
FOG_IMPORT Vec4 fog_add_v4(Vec4 self, Vec4 other) { return add_v4(self, other); }
FOG_IMPORT Vec4 fog_sub_v4(Vec4 self, Vec4 other) { return sub_v4(self, other); }
FOG_IMPORT Vec4 fog_mul_v4(Vec4 self, real scaler) { return mul_v4(self, scaler); }
FOG_IMPORT Vec4 fog_div_v4(Vec4 self, real scaler) { return div_v4(self, scaler); }
FOG_IMPORT bool fog_eq_v4(Vec4 self, Vec4 other) { return eq_v4(self, other); }
FOG_IMPORT s32 fog_dot_v2i(Vec2i a, Vec2i b) { return dot_v2i(a, b); }
FOG_IMPORT s32 fog_length_squared_v2i(Vec2i a, Vec2i b) { return length_squared_v2i(a, b); }
FOG_IMPORT real fog_length_v2i(Vec2i a) { return length_v2i(a); }
FOG_IMPORT bool fog_random_bit() { return random_bit(); }
FOG_IMPORT u32 fog_random_int() { return random_int(); }
FOG_IMPORT f32 fog_random_real(f32 low) { return random_real(low); }
FOG_IMPORT Vec2 fog_random_unit_vec2() { return random_unit_vec2(); }
FOG_IMPORT Vec3 fog_random_unit_vec3() { return random_unit_vec3(); }
FOG_IMPORT bool fog_input_using_controller() { return Input::using_controller(); }
FOG_IMPORT void fog_input_start_text_input() { return Input::start_text_input(); }
FOG_IMPORT void fog_input_stop_text_input() { return Input::stop_text_input(); }
FOG_IMPORT bool fog_input_edit_string(char *text, u32 max_length) { return Input::edit_string(text, max_length); }
FOG_IMPORT bool fog_input_add(InputCode code, Name name, Player player) { return Input::add(code, name, player); }
FOG_IMPORT bool fog_input_triggered(Name name, Player player) { return Input::triggered(name, player); }
FOG_IMPORT bool fog_input_pressed(Name name, Player player) { return Input::pressed(name, player); }
FOG_IMPORT bool fog_input_released(Name name, Player player) { return Input::released(name, player); }
FOG_IMPORT bool fog_input_down(Name name, Player player) { return Input::down(name, player); }
FOG_IMPORT f32 fog_input_value(Name name, Player player) { return Input::value(name, player); }
FOG_IMPORT bool fog_input_super_pressed(Name name, Player player) { return Input::super_pressed(name, player); }
FOG_IMPORT Vec2 fog_input_mouse_position() { return Input::mouse_position(); }
FOG_IMPORT Vec2 fog_input_mouse_move() { return Input::mouse_move(); }
FOG_IMPORT Vec2 fog_input_screen_to_world(Vec2 p, u32 camera_id) { return Input::screen_to_world(p, camera_id); }
FOG_IMPORT Vec2 fog_input_world_mouse_position(u32 camera_id) { return Input::world_mouse_position(camera_id); }
FOG_IMPORT Vec2 fog_input_normalized_mouse_position() { return Input::normalized_mouse_position(); }
FOG_IMPORT Vec2 fog_input_world_mouse_move(u32 camera_id) { return Input::world_mouse_move(camera_id); }
FOG_IMPORT u32 fog_input_mouse_depth() { return Input::mouse_depth(); }
FOG_IMPORT void fog_input_eat_mouse() { return Input::eat_mouse(); }
FOG_IMPORT Vec2 fog_input_mouse_scroll() { return Input::mouse_scroll(); }
FOG_IMPORT bool fog_input_mouse_triggered(u8 button) { return Input::mouse_triggered(button); }
FOG_IMPORT bool fog_input_mouse_pressed(u8 button) { return Input::mouse_pressed(button); }
FOG_IMPORT bool fog_input_mouse_released(u8 button) { return Input::mouse_released(button); }
FOG_IMPORT bool fog_input_mouse_down(u8 button) { return Input::mouse_down(button); }
FOG_IMPORT AudioID fog_mixer_play_sound(u32 channel_id, AssetID asset_id, f32 pitch) { return Mixer::play_sound(channel_id, asset_id, pitch); }
FOG_IMPORT AudioID fog_mixer_play_sound_at(u32 channel_id, AssetID asset_id, Vec2 position, f32 pitch) { return Mixer::play_sound_at(channel_id, asset_id, position, pitch); }
FOG_IMPORT void fog_mixer_stop_sound(AudioID id) { return Mixer::stop_sound(id); }
FOG_IMPORT void fog_mixer_channel_set_delay(u32 channel_id, f32 feedback, f32 len_seconds, f32 in_seconds) { return Mixer::channel_set_delay(channel_id, feedback, len_seconds, in_seconds); }
FOG_IMPORT void fog_mixer_channel_set_lowpass(u32 channel_id, f32 weight, f32 in_seconds) { return Mixer::channel_set_lowpass(channel_id, weight, in_seconds); }
FOG_IMPORT void fog_mixer_channel_set_highpass(u32 channel_id, f32 weight, f32 in_seconds) { return Mixer::channel_set_highpass(channel_id, weight, in_seconds); }
FOG_IMPORT Camera *fog_renderer_fetch_camera(u32 camera_id) { return Renderer::fetch_camera(camera_id); }
FOG_IMPORT Window *fog_renderer_get_window() { return Renderer::get_window(); }
FOG_IMPORT f32 fog_renderer_get_window_width() { return Renderer::get_window_width(); }
FOG_IMPORT f32 fog_renderer_get_window_height() { return Renderer::get_window_height(); }
FOG_IMPORT f32 fog_renderer_get_window_aspect_ratio() { return Renderer::get_window_aspect_ratio(); }
FOG_IMPORT void fog_renderer_camera_shake(Camera *camera, Vec2 shake) { return Renderer::camera_shake(camera, shake); }
FOG_IMPORT Camera fog_renderer_camera_lerp(Camera camera_a, Camera camera_b, f32 lerp) { return Renderer::camera_lerp(camera_a, camera_b, lerp); }
FOG_IMPORT Camera fog_renderer_camera_smooth(Camera camera_a, Camera camera_b, f32 slerp) { return Renderer::camera_smooth(camera_a, camera_b, slerp); }
FOG_IMPORT Camera fog_renderer_camera_fit(u32 num_points, Vec2 *points, f32 border) { return Renderer::camera_fit(num_points, points, border); }
FOG_IMPORT void fog_renderer_camera_fit_inplace(Camera *camera, u32 num_points, Vec2 *points, f32 border) { return Renderer::camera_fit_inplace(camera, num_points, points, border); }
FOG_IMPORT void fog_renderer_debug_camera(u32 camera_id) { return Renderer::debug_camera(camera_id); }
FOG_IMPORT void fog_renderer_turn_on_camera(u32 camera_id) { return Renderer::turn_on_camera(camera_id); }
FOG_IMPORT void fog_renderer_turn_off_camera(u32 camera_id) { return Renderer::turn_off_camera(camera_id); }
FOG_IMPORT void fog_renderer_push_sprite_rect(u32 layer, Vec2 position, Vec2 dimension, f32 angle, AssetID texture, Vec2 uv_min, Vec2 uv_dimension, Vec4 color) { return Renderer::push_sprite_rect(layer, position, dimension, angle, texture, uv_min, uv_dimension, color); }
FOG_IMPORT void fog_renderer_push_rectangle(u32 layer, Vec2 position, Vec2 dimension, Vec4 color) { return Renderer::push_rectangle(layer, position, dimension, color); }
FOG_IMPORT void fog_renderer_push_line_gradient(u32 layer, Vec2 start, Vec2 end, Vec4 start_color, Vec4 end_color, f32 thickness) { return Renderer::push_line_gradient(layer, start, end, start_color, end_color, thickness); }
FOG_IMPORT void fog_renderer_push_line(u32 layer, Vec2 start, Vec2 end, Vec4 color, f32 thickness) { return Renderer::push_line(layer, start, end, color, thickness); }
FOG_IMPORT void fog_renderer_push_point(u32 layer, Vec2 point, Vec4 color, f32 size) { return Renderer::push_point(layer, point, color, size); }
FOG_IMPORT void fog_renderer_set_window_position(int x, int y) { return Renderer::set_window_position(x, y); }
FOG_IMPORT Vec2 fog_renderer_get_window_position() { return Renderer::get_window_position(); }
FOG_IMPORT void fog_renderer_set_window_size(int w, int h) { return Renderer::set_window_size(w, h); }
FOG_IMPORT Vec2 fog_renderer_get_window_size() { return Renderer::get_window_size(); }
FOG_IMPORT void fog_renderer_set_window_title(const char *title) { return Renderer::set_window_title(title); }
FOG_IMPORT void fog_renderer_set_fullscreen(bool fullscreen) { return Renderer::set_fullscreen(fullscreen); }
FOG_IMPORT void fog_renderer_toggle_fullscreen() { return Renderer::toggle_fullscreen(); }
FOG_IMPORT bool fog_renderer_is_fullscreen() { return Renderer::is_fullscreen(); }
FOG_IMPORT ParticleSystem fog_renderer_create_particle_system(u32 layer, u32 num_particles, Vec2 position) { return Renderer::create_particle_system(layer, num_particles, position); }
FOG_IMPORT void fog_renderer_destroy_particle_system(ParticleSystem *system) { return Renderer::destroy_particle_system(system); }
FOG_IMPORT void fog_renderer_particle_spawn(ParticleSystem *self, u32 num_particles) { return Renderer::particle_spawn(self, num_particles); }
FOG_IMPORT void fog_renderer_particle_update(ParticleSystem *self, f32 delta) { return Renderer::particle_update(self, delta); }
FOG_IMPORT void fog_renderer_particle_draw(ParticleSystem *self) { return Renderer::particle_draw(self); }
FOG_IMPORT void fog_renderer_particle_clear(ParticleSystem *self) { return Renderer::particle_clear(self); }
FOG_IMPORT void fog_renderer_particle_add_sprite(ParticleSystem *self, AssetID sprite) { return Renderer::particle_add_sprite(self, sprite); }
FOG_IMPORT Vec2 fog_renderer_messure_text(const char *string, f32 size, AssetID font_id) { return Renderer::messure_text(string, size, font_id); }
FOG_IMPORT void fog_renderer_draw_text(const char *string, f32 x, f32 y, f32 size, AssetID font_id, f32 alignment) { return Renderer::draw_text(string, x, y, size, font_id, alignment); }
FOG_IMPORT char *fog_util_format(const char *fmt, va_list args) { return Util::format(fmt, args); }
FOG_IMPORT u8 fog_util_utf8_size(const char *c) { return Util::utf8_size(c); }
FOG_IMPORT bool fog_util_utf8_is_first_char(const char *c) { return Util::utf8_is_first_char(c); }
FOG_IMPORT bool fog_util_utf8_insert_glyph(char *to, const char *from, u32 length) { return Util::utf8_insert_glyph(to, from, length); }
FOG_IMPORT char *fog_util_utf8_advance(char *c) { return Util::utf8_advance(c); }
FOG_IMPORT void *fog_util_temporary_bytes(u64 num) { return Util::temporary_bytes(num); }
FOG_IMPORT void fog_util_copy_bytes(const void *from, void *to, u64 size) { return Util::copy_bytes(from, to, size); }
FOG_IMPORT void fog_util_allow_allocation() { return Util::allow_allocation(); }
FOG_IMPORT void fog_util_allow_all_allocations() { return Util::allow_all_allocations(); }
FOG_IMPORT bool fog_util_begin_tweak_section(const char *name, bool *active) { return Util::begin_tweak_section(name, active); }
FOG_IMPORT void fog_util_end_tweak_section(bool *active) { return Util::end_tweak_section(active); }
FOG_IMPORT bool fog_util_tweak_bool(const char *name, bool *value) { return Util::tweak_bool(name, value); }
FOG_IMPORT bool fog_util_tweak_s32(const char *name, s32 *value) { return Util::tweak_s32(name, value); }
FOG_IMPORT bool fog_util_tweak_u32(const char *name, u32 *value) { return Util::tweak_u32(name, value); }
FOG_IMPORT bool fog_util_tweak_f32(const char *name, f32 *value, f32 modifier) { return Util::tweak_f32(name, value, modifier); }
FOG_IMPORT bool fog_util_tweak_vec2(const char *name, Vec2 *value, f32 modifier) { return Util::tweak_vec2(name, value, modifier); }
FOG_IMPORT bool fog_util_tweak_span(const char *name, Span *value, f32 modifier) { return Util::tweak_span(name, value, modifier); }
#undef FOG_IMPORT